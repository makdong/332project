syntax = "proto3";

package distributedsorting;
/*
master should check whether the workers are running or not.
If every worker is ready, then continue the program.
If it is not, we need timeout.
 */

message ConnectionRequest {
  string ip = 1;
  int32 port = 2;
}

message ConnectionResponse {
  int32 id = 1;
}

message SortRequest {
  int32 id = 1;
}
message SortResponse {
  int32 state = 1;
}

message TerminateRequest {
  int32 id = 1;
  bool done = 2;
}

message TerminateResponse {

}

message SamplingRequest {
  int32 id = 1;
  string key = 2;
}

message workerSamplingInfo{
  int32 id = 1;
  string ip = 2;
  int32 port = 3;
  int32 state = 4;
  string key = 5;
}

message SamplingResponse {
  int32 state = 1;
  int32 workerNum = 2;
  repeated workerSamplingInfo workerInfo = 3;
}

service Connection{
  rpc connect(ConnectionRequest) returns (ConnectionResponse) {}
  rpc sample (SamplingRequest) returns (SamplingResponse) {}
  rpc terminate(TerminateRequest) returns (TerminateResponse) {}
  rpc sort(SortRequest) returns (SortResponse) {}
}

